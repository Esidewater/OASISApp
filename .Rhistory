sort() %>%
toString()
label_route_shape <- function(net_x, net_y, angle_change) {
angle <- atan2(net_y, net_x) * 180 / pi
depth <- net_x
width <- net_y
if (depth > 10 && abs(width) < 5) return("Go")
if (depth > 8 && width > 5) return("Post")
if (depth > 8 && width < -5) return("Corner")
if (depth < 5 && width > 5) return("Flat")
if (depth < 5 && width < -5) return("Whip")
if (depth > 5 && abs(width) < 2) return("Dig")
if (depth < 2 && abs(width) < 2 && angle_change > 1) return("Jerk")
return("Other")
}
features <- features %>%
mutate(inferred_route = label_route_shape(net_x, net_y, angle_change))
library(data.table)
library(dplyr)
library(ggplot2)
# Load tracking data (Week 1) and filter to "LIVE" frames
tracking <- fread("C:/Users/erics/OneDrive - PING/desktop/nfldata/tracking_week_1.csv")
tracking_live <- tracking %>%
filter(frameType == "LIVE", !is.na(nflId))
# Optional: join in route labels from player_play
player_play <- read.csv("C:/Users/erics/OneDrive - PING/desktop/nfldata/player_play.csv")
tracking_live <- tracking_live %>%
left_join(player_play %>% select(gameId, playId, nflId, routeRan), by = c("gameId", "playId", "nflId"))
# Filter to a specific example pass play
example_play <- tracking_live %>%
filter(gameId == 2022090800, playId == 56)
# Plot all player routes on that play
ggplot(example_play, aes(x = x, y = y, color = factor(nflId))) +
geom_path(linewidth = 1) +  # changed from size to linewidth to avoid warning
coord_fixed() +
labs(title = "Player Routes for Example Play", color = "Player ID") +
theme_minimal()
# Define route feature extraction function
extract_route_features <- function(df) {
df <- df %>% arrange(frameId)
dx <- diff(df$x)
dy <- diff(df$y)
total_distance <- sum(sqrt(dx^2 + dy^2), na.rm = TRUE)
net_x <- df$x[nrow(df)] - df$x[1]
net_y <- df$y[nrow(df)] - df$y[1]
angle_change <- sum(abs(diff(atan2(dy, dx))), na.rm = TRUE)
return(data.frame(
nflId = df$nflId[1],
start_x = df$x[1],
start_y = df$y[1],
end_x = df$x[nrow(df)],
end_y = df$y[nrow(df)],
net_x = net_x,
net_y = net_y,
total_distance = total_distance,
angle_change = angle_change
))
}
# Apply to each player on the play
features <- example_play %>%
group_by(nflId) %>%
group_split() %>%
lapply(extract_route_features) %>%
bind_rows()
# Ensure no grouping before mutate
features <- ungroup(features)
# Route shape labeling function
label_route_shape <- function(net_x, net_y, angle_change) {
angle <- atan2(net_y, net_x) * 180 / pi
depth <- net_x
width <- net_y
if (depth > 10 && abs(width) < 5) return("Go")
if (depth > 8 && width > 5) return("Post")
if (depth > 8 && width < -5) return("Corner")
if (depth < 5 && width > 5) return("Flat")
if (depth < 5 && width < -5) return("Whip")
if (depth > 5 && abs(width) < 2) return("Dig")
if (depth < 2 && abs(width) < 2 && angle_change > 1) return("Jerk")
return("Other")
}
# Apply route labeling
features <- features %>%
mutate(inferred_route = label_route_shape(net_x, net_y, angle_change))
# --- Full Data Loading Script for WINDOWS Environment ---
# 1. Load necessary packages
# Ensure tidyverse is installed: install.packages("tidyverse")
library(tidyverse)
# 2. Define Data Path for WINDOWS
# Using forward slashes is more robust in R, even on Windows.
data_path <- "C:/Users/erics/OneDrive - PING/desktop/nfldata"
cat("Using data path:", data_path, "\n\n")
# 3. Define full paths to the CSV files
games_csv_path <- file.path(data_path, "games.csv")
plays_csv_path <- file.path(data_path, "plays.csv")
players_csv_path <- file.path(data_path, "players.csv")
player_play_csv_path <- file.path(data_path, "player_play.csv")
# 4. Check if files exist and then load them
cat("--- Loading Base CSV Files ---\n")
# Helper function to load files if they don't already exist
load_df_if_needed <- function(df_name_str, csv_name, base_path) {
# This function checks if the dataframe already exists in the global environment
# and loads it from the CSV if it doesn't.
if (!exists(df_name_str, envir = .GlobalEnv)) {
df_path <- file.path(base_path, csv_name)
if (file.exists(df_path)) {
cat("Loading", csv_name, "for", df_name_str, "...\n")
# Use assign() with envir = .GlobalEnv to create the dataframe in your main session
assign(df_name_str, read_csv(df_path, show_col_types = FALSE), envir = .GlobalEnv)
cat("Loaded", df_name_str, "with", nrow(get(df_name_str)), "rows.\n")
} else {
stop(paste(csv_name, "not found at:", df_path, ". Please verify the path."))
}
} else {
cat(df_name_str, "is already loaded.\n")
}
}
tryCatch({
load_df_if_needed("games_df", "games.csv", data_path)
load_df_if_needed("plays_df", "plays.csv", data_path)
load_df_if_needed("players_df", "players.csv", data_path)
load_df_if_needed("player_play_df", "player_play.csv", data_path)
cat("\nSUCCESS: Base CSV files are loaded and ready in your R environment.\n")
}, error = function(e) {
stop(paste("An error occurred during file loading:", e$message))
})
# Also load tracking_week_1.csv as a default example
tryCatch({
load_df_if_needed("tracking_w1_df", "tracking_week_1.csv", data_path)
cat("Loaded tracking_w1_df as an example.\n")
}, error = function(e) {
warning(paste("Could not load tracking_week_1.csv. This is okay if your analysis uses a different week."))
})
cat("\n--- Data Loading Complete ---\n")
# --- R Script to Label Pass Plays with Known Route Combinations (Windows Paths) ---
# 1. Load necessary packages
library(tidyverse)
# --- Define Data Path for WINDOWS ---
# This path has been updated based on your provided location.
data_path <- "C:/Users/erics/OneDrive - PING/desktop/nfldata"
# --- Load Base CSV Files ---
cat("Loading base CSV files...\n")
games_df <- read_csv(file.path(data_path, "games.csv"), show_col_types = FALSE)
plays_df <- read_csv(file.path(data_path, "plays.csv"), show_col_types = FALSE)
players_df <- read_csv(file.path(data_path, "players.csv"), show_col_types = FALSE)
player_play_df <- read_csv(file.path(data_path, "player_play.csv"), show_col_types = FALSE)
# For this analysis, we will process a sample from week 1
tracking_df <- read_csv(file.path(data_path, "tracking_week_1.csv"), show_col_types = FALSE)
cat("Base dataframes and tracking_week_1.csv loaded successfully.\n\n")
# Merge players info into tracking data for position and names
tracking_df <- tracking_df %>%
left_join(players_df %>% select(nflId, position, officialDisplayName = displayName), by = "nflId") %>%
mutate(displayName = ifelse(!is.na(officialDisplayName), official_displayName, displayName)) %>%
select(-officialDisplayName)
# --- R Script to Label Pass Plays with Known Route Combinations (Corrected) ---
# 1. Load necessary packages
library(tidyverse)
# --- Define Data Path for WINDOWS ---
data_path <- "C:/Users/erics/OneDrive - PING/desktop/nfldata"
# --- Load Base CSV Files ---
cat("Loading base CSV files...\n")
games_df <- read_csv(file.path(data_path, "games.csv"), show_col_types = FALSE)
plays_df <- read_csv(file.path(data_path, "plays.csv"), show_col_types = FALSE)
players_df <- read_csv(file.path(data_path, "players.csv"), show_col_types = FALSE)
player_play_df <- read_csv(file.path(data_path, "player_play.csv"), show_col_types = FALSE)
tracking_df <- read_csv(file.path(data_path, "tracking_week_1.csv"), show_col_types = FALSE)
cat("Base dataframes and tracking_week_1.csv loaded successfully.\n\n")
# --- CORRECTED: Merge players info into tracking data for position and names ---
cat("Merging player info into tracking data...\n")
tracking_df <- tracking_df %>%
# Rename the original displayName from tracking to avoid collision
rename(tracking_displayName = displayName) %>%
left_join(
# Select the columns we want from players_df
players_df %>% select(nflId, official_displayName = displayName, position),
by = "nflId"
) %>%
mutate(
# Create a final, definitive displayName, prioritizing the one from players_df
displayName = ifelse(!is.na(official_displayName), official_displayName, tracking_displayName),
# The 'position' column is added directly from players_df
position = position # Use the newly joined 'position' column
) %>%
# Clean up the temporary columns
select(-any_of(c("official_displayName", "tracking_displayName")))
cat("Player info merged successfully.\n\n")
# --- Heuristic Route Classifier Function ---
# (This function and the ones below remain the same as the last version)
classify_individual_route <- function(route_path_df, los, play_direction) {
if (nrow(route_path_df) < 5) return("Other")
if (play_direction == "right") {
route_path_df$x_from_los <- route_path_df$x - los
} else {
route_path_df$x_from_los <- los - route_path_df$x
}
start_y <- first(route_path_df$y)
max_depth <- max(route_path_df$x_from_los, na.rm = TRUE)
final_x_from_los <- last(route_path_df$x_from_los)
final_y_disp_from_start <- last(route_path_df$y) - start_y
if (max_depth > 10 && abs(final_y_disp_from_start) >= 7) {
if (sign(final_y_disp_from_start) == sign(start_y - (160/3/2))) return("Corner") else return("Post")
}
if (max_depth > 15 && abs(final_y_disp_from_start) < 8) return("Go")
if (5 < max_depth && max_depth < 14 && abs(final_x_from_los - max_depth) > 3) return("Hitch")
if (max_depth < 4 && abs(final_y_disp_from_start) > 3) return("Flat")
if (1 < max_depth && max_depth < 6 && abs(final_y_disp_from_start) > 10) return("Drag")
if (2 < max_depth && max_depth < 7 && abs(final_y_disp_from_start) > 2) {
if (sign(final_y_disp_from_start) != sign(start_y - (160/3/2))) return("Slant")
}
return("Other")
}
# --- Route Combination Labeling Function ---
label_play_concepts <- function(classified_routes_df) {
check_side <- function(side_df) {
routes_on_side <- setdiff(unique(side_df$route_type), "Other")
if ("Corner" %in% routes_on_side && ("Hitch" %in% routes_on_side || "Flat" %in% routes_on_side)) return("Smash")
if ("Slant" %in% routes_on_side && "Flat" %in% routes_on_side) return("Slant-Flat")
return(NA_character_)
}
left_side_concept <- check_side(classified_routes_df %>% filter(side_of_formation == "Left"))
right_side_concept <- check_side(classified_routes_df %>% filter(side_of_formation == "Right"))
all_routes <- setdiff(unique(classified_routes_df$route_type), "Other")
field_concept <- NA_character_
if (sum(classified_routes_df$route_type == "Drag") >= 2) field_concept <- "Mesh"
all_found_concepts <- na.omit(c(left_side_concept, right_side_concept, field_concept))
if (length(all_found_concepts) > 0) return(paste(unique(all_found_concepts), collapse = " / "))
return("Unclassified")
}
# --- Process a Sample of Plays ---
cat("\nProcessing a sample of plays to label route combinations...\n")
set.seed(123)
plays_with_week <- plays_df %>%
inner_join(games_df %>% select(gameId, week), by = "gameId")
sample_plays <- plays_with_week %>%
filter(passResult %in% c('C', 'I'), week == 1, !is.na(timeToThrow)) %>%
sample_n(15)
results <- list()
for (i in 1:nrow(sample_plays)) {
play_row <- sample_plays[i,]
game_id <- play_row$gameId
play_id <- play_row$playId
play_tracking <- tracking_df %>% filter(gameId == game_id & playId == play_id)
if(nrow(play_tracking) == 0) next
play_info <- plays_df %>% filter(gameId == game_id, playId == play_id) %>% slice(1)
los <- play_info$absoluteYardlineNumber
play_direction <- play_tracking$playDirection[1]
possession_team <- play_info$possessionTeam
snap_frame <- play_tracking %>% filter(event == 'ball_snap') %>% pull(frameId) %>% first()
if(is.na(snap_frame)) next
release_frame <- snap_frame + round(play_info$timeToThrow * 10)
play_window_data <- play_tracking %>% filter(frameId >= snap_frame & frameId <= release_frame)
ball_pos_at_snap <- play_window_data %>% filter(is.na(nflId)) %>% slice(1)
ball_y_snap <- if(nrow(ball_pos_at_snap) > 0) ball_pos_at_snap$y else 26.67
offensive_skill_players <- play_window_data %>%
filter(club == possession_team & position %in% c("WR", "TE", "RB") & !is.na(nflId))
if(nrow(offensive_skill_players) == 0) next
player_routes_at_snap <- offensive_skill_players %>%
group_by(nflId, displayName, position) %>%
summarise(y_at_snap = first(y), .groups="drop") %>%
mutate(side_of_formation = if_else(y_at_snap > ball_y_snap, "Left", "Right"))
classified_routes_list <- list()
for (j in 1:nrow(player_routes_at_snap)) {
player_row <- player_routes_at_snap[j,]
nfl_id <- player_row$nflId
player_path <- play_window_data %>% filter(nflId == nfl_id)
route_type <- classify_individual_route(player_path, los, play_direction)
classified_routes_list[[j]] <- tibble(nflId = nfl_id, route_type = route_type, side_of_formation = player_row$side_of_formation)
}
if(length(classified_routes_list) == 0) next
classified_routes_df <- bind_rows(classified_routes_list)
play_concept_label <- label_play_concepts(classified_routes_df)
results[[i]] <- tibble(
gameId = game_id,
playId = play_id,
playDescription = play_info$playDescription,
labeled_concept = play_concept_label,
classified_routes = classified_routes_df %>%
left_join(select(players_df, nflId, displayName), by="nflId") %>%
mutate(route_desc = paste0(displayName, ":", route_type)) %>%
pull(route_desc) %>%
paste(collapse = ", ")
)
}
# --- 5. Display Results ---
final_results_df <- bind_rows(results)
cat("\n--- Results of Heuristic Route Combination Labeling (Sample of 15 Plays) ---\n")
print(final_results_df %>% select(gameId, playId, labeled_concept, classified_routes, playDescription) %>% as.data.frame())
# --- Full R Script to Animate and Verify a Labeled Route Concept ---
# 1. Load necessary packages
library(tidyverse)
library(gganimate)
library(ggthemes)
library(gifski)
library(ragg)
# Set rendering device for gganimate
options(gganimate.dev = 'ragg')
# --- Define Data Path for WINDOWS ---
data_path <- "C:/Users/erics/OneDrive - PING/desktop/nfldata"
# --- Load Base CSV Files ---
cat("Loading base CSV files...\n")
games_df <- read_csv(file.path(data_path, "games.csv"), show_col_types = FALSE)
plays_df <- read_csv(file.path(data_path, "plays.csv"), show_col_types = FALSE)
players_df <- read_csv(file.path(data_path, "players.csv"), show_col_types = FALSE)
cat("Base dataframes loaded successfully.\n\n")
# --- Helper Function to Plot a Basic Football Field ---
plot_field_basic <- function() {
field_color <- "darkgreen"; line_color <- "white"; endzone_color <- "forestgreen"; field_width_yards <- 160/3
p <- ggplot() + geom_rect(aes(xmin=0,xmax=120,ymin=0,ymax=field_width_yards), fill=field_color, color=line_color) + geom_rect(aes(xmin=0,xmax=10,ymin=0,ymax=field_width_yards), fill=endzone_color, alpha=0.5) + geom_rect(aes(xmin=110,xmax=120,ymin=0,ymax=field_width_yards), fill=endzone_color, alpha=0.5) + geom_segment(aes(x=10,xend=110,y=0,yend=0), color=line_color,linewidth=1) + geom_segment(aes(x=10,xend=110,y=field_width_yards,yend=field_width_yards), color=line_color,linewidth=1) + geom_segment(aes(x=10,xend=10,y=0,yend=field_width_yards), color=line_color,linewidth=1) + geom_segment(aes(x=110,xend=110,y=0,yend=field_width_yards), color=line_color,linewidth=1)
yl <- lapply(seq(15,105,by=5), function(x) geom_segment(aes(x=x,y=0,xend=x,yend=field_width_yards),color=line_color,linewidth=0.5));p<-p+yl
yn <- lapply(seq(20,100,by=10),function(x){lbl<-ifelse(x<=50,x,100-x);list(annotate("text",x=x,y=5,label=lbl,colour=line_color,size=5,angle=0),annotate("text",x=x,y=field_width_yards-5,label=lbl,colour=line_color,size=5,angle=180))});p<-p+unlist(yn,recursive=F)
yhfs<-70.75/3;yhb<-yhfs;yht<-field_width_yards-yhfs;htly<-2/3;hthl<-htly/2
hmc<-lapply(seq(11,109,by=1),function(xc){list(geom_segment(aes(x=xc,y=yhb-hthl,xend=xc,yend=yhb+hthl),color=line_color,linewidth=0.3),geom_segment(aes(x=xc,y=yht-hthl,xend=xc,yend=yht+hthl),color=line_color,linewidth=0.3))});p<-p+unlist(hmc,recursive=F)
p<-p+theme_void();return(p)
}
# --- Basic NFL Team Colors and get_team_colors function ---
nfl_team_colors <- list("MIA"=c("#008E97","#FC4C02"), "NE"=c("#002244","#C60C30"), "football"=c("#A52A2A","#000000"), "DEFAULT"=c("darkgrey","black"))
get_team_colors <- function(team_abbr) {
colors <- nfl_team_colors[[team_abbr]]
if (is.null(colors)) {
warning(paste("Team abbr '", team_abbr, "' not found. Using default.", sep=""))
return(nfl_team_colors[["DEFAULT"]])
}
return(colors)
}
cat("Helper functions defined.\n")
# --- Configuration for the Specific Animation ---
animate_gameId <- 2022091106
animate_playId <- 2721
output_gif_filename <- paste0("concept_check_smash_", animate_gameId, "_", animate_playId, ".gif")
use_dynamic_los_to_endzone_zoom <- TRUE
n_frames_per_second <- 20
# --- End Configuration ---
cat("--- Animating Play: Game ID", animate_gameId, "Play ID", animate_playId, "---\n")
# --- Step A: Load and Prepare Tracking Data ---
game_week_info_anim <- games_df %>% filter(gameId == animate_gameId) %>% select(week) %>% slice(1)
if (nrow(game_week_info_anim) == 0 || is.na(game_week_info_anim$week)) { stop(paste("Cannot determine week for gameId:", animate_gameId)) }
animate_week <- game_week_info_anim$week
required_tracking_filename_anim <- paste0("tracking_week_", animate_week, ".csv")
tracking_filepath_anim <- file.path(data_path, required_tracking_filename_anim)
cat("Loading tracking data for Week", animate_week, "from:", tracking_filepath_anim, "\n")
if (!file.exists(tracking_filepath_anim)) { stop(paste("Tracking file not found:", tracking_filepath_anim)) }
current_tracking_df_anim_raw <- read_csv(tracking_filepath_anim, show_col_types = FALSE, lazy = TRUE)
play_tracking_raw <- current_tracking_df_anim_raw %>% filter(gameId == animate_gameId, playId == animate_playId) %>% collect()
if (nrow(play_tracking_raw) == 0) { stop(paste("No tracking data for selected play")) }
rm(current_tracking_df_anim_raw); gc()
play_tracking_for_anim <- play_tracking_raw %>%
left_join(players_df %>% select(nflId, displayName, jerseyNumber, position), by = "nflId")
# --- Final Corrected Animation Script for Windows ---
# 1. Load necessary packages
library(tidyverse)
library(gganimate)
library(ggthemes)
library(gifski)
library(ragg) # For the ragg_png device
# Set rendering device for gganimate
options(gganimate.dev = 'ragg')
# --- Define Data Path for WINDOWS ---
data_path <- "C:/Users/erics/OneDrive - PING/desktop/nfldata"
# --- Ensure Base DataFrames are Loaded ---
cat("Checking and loading base dataframes if necessary...\n")
load_df_if_needed <- function(df_name_str, csv_name, base_path) {
if (!exists(df_name_str, envir = .GlobalEnv)) {
df_path <- file.path(base_path, csv_name)
if (file.exists(df_path)) {
cat("Loading", csv_name, "for", df_name_str, "...\n")
assign(df_name_str, read_csv(df_path, show_col_types = FALSE), envir = .GlobalEnv)
} else { stop(paste(csv_name, "not found at", df_path)) }
}
}
load_df_if_needed("games_df", "games.csv", data_path)
load_df_if_needed("plays_df", "plays.csv", data_path)
load_df_if_needed("players_df", "players.csv", data_path)
cat("Base dataframes loaded/verified.\n\n")
# --- Helper Function to Plot a Basic Football Field ---
plot_field_basic <- function() {
field_color <- "darkgreen"; line_color <- "white"; endzone_color <- "forestgreen"; field_width_yards <- 160/3
p <- ggplot() + geom_rect(aes(xmin=0,xmax=120,ymin=0,ymax=field_width_yards), fill=field_color, color=line_color) + geom_rect(aes(xmin=0,xmax=10,ymin=0,ymax=field_width_yards), fill=endzone_color, alpha=0.5) + geom_rect(aes(xmin=110,xmax=120,ymin=0,ymax=field_width_yards), fill=endzone_color, alpha=0.5) + geom_segment(aes(x=10,xend=110,y=0,yend=0), color=line_color,linewidth=1) + geom_segment(aes(x=10,xend=110,y=field_width_yards,yend=field_width_yards), color=line_color,linewidth=1) + geom_segment(aes(x=10,xend=10,y=0,yend=field_width_yards), color=line_color,linewidth=1) + geom_segment(aes(x=110,xend=110,y=0,yend=field_width_yards), color=line_color,linewidth=1)
yl <- lapply(seq(15,105,by=5), function(x) geom_segment(aes(x=x,y=0,xend=x,yend=field_width_yards),color=line_color,linewidth=0.5));p<-p+yl
yn <- lapply(seq(20,100,by=10),function(x){lbl<-ifelse(x<=50,x,100-x);list(annotate("text",x=x,y=5,label=lbl,colour=line_color,size=5,angle=0),annotate("text",x=x,y=field_width_yards-5,label=lbl,colour=line_color,size=5,angle=180))});p<-p+unlist(yn,recursive=F)
yhfs<-70.75/3;yhb<-yhfs;yht<-field_width_yards-yhfs;htly<-2/3;hthl<-htly/2
hmc<-lapply(seq(11,109,by=1),function(xc){list(geom_segment(aes(x=xc,y=yhb-hthl,xend=xc,yend=yhb+hthl),color=line_color,linewidth=0.3),geom_segment(aes(x=xc,y=yht-hthl,xend=xc,yend=yht+hthl),color=line_color,linewidth=0.3))});p<-p+unlist(hmc,recursive=F)
p<-p+theme_void();return(p)
}
# --- Basic NFL Team Colors and Corrected get_team_colors function ---
nfl_team_colors <- list("PHI"=c("#004C54","#A5ACAF"),"DET"=c("#0076B6","#B0B7BC"),"BUF"=c("#00338D","#C60C30"),"PIT"=c("#000000","#FFB612"),"SEA"=c("#002244","#69BE28"),"DEN"=c("#FB4F14","#002244"),"LA"=c("#003594","#FFA300"),"football"=c("#A52A2A","#000000"),"DEFAULT"=c("darkgrey","black"))
get_team_colors <- function(team_abbr) {
colors <- nfl_team_colors[[team_abbr]]
if (is.null(colors)) {
warning(paste("Team abbr '", team_abbr, "' not found in nfl_team_colors. Using default.", sep=""))
return(nfl_team_colors[["DEFAULT"]])
}
return(colors)
}
cat("Helper functions defined.\n")
# --- Configuration for the Specific Animation ---
animate_gameId <- 2022090800
animate_playId <- 2208
# animate_week is determined dynamically
ramsey_nflId <- 43294
gabe_davis_nflId <- 52536
ramsey_name <- "Jalen Ramsey"
gabe_davis_name <- "Gabe Davis"
output_gif_filename <- paste0("ramsey_vs_davis_coverage_final_", animate_gameId, "_", animate_playId, ".gif")
use_dynamic_los_to_endzone_zoom <- TRUE
n_frames_per_second <- 20
temp_play_info_for_anim <- plays_df %>%
filter(gameId == animate_gameId, playId == animate_playId) %>%
slice(1)
if (nrow(temp_play_info_for_anim) == 0) stop(paste("Play info not found for GID:", animate_gameId, "PID:", animate_playId))
time_to_throw_for_anim <- if(!is.na(temp_play_info_for_anim$timeToThrow)) temp_play_info_for_anim$timeToThrow else 3.0
animation_seconds_after_snap <- ceiling(time_to_throw_for_anim) + 3.0
# --- End Configuration ---
cat("--- Animating Jalen Ramsey vs Gabe Davis Play ---\n")
cat("Game ID:", animate_gameId, "Play ID:", animate_playId, "\n")
# --- Step A: Load and Prepare Tracking Data ---
game_week_info_anim <- games_df %>% filter(gameId == animate_gameId) %>% select(week) %>% slice(1)
if (nrow(game_week_info_anim) == 0 || is.na(game_week_info_anim$week)) { stop(paste("Cannot determine week for gameId:", animate_gameId)) }
animate_week <- game_week_info_anim$week
required_tracking_filename_anim <- paste0("tracking_week_", animate_week, ".csv")
tracking_filepath_anim <- file.path(data_path, required_tracking_filename_anim)
cat("Loading tracking data for Week", animate_week, "from:", tracking_filepath_anim, "\n")
if (!file.exists(tracking_filepath_anim)) { stop(paste("Tracking file not found:", tracking_filepath_anim)) }
current_tracking_df_anim_raw <- read_csv(tracking_filepath_anim, show_col_types = FALSE, lazy = TRUE)
play_tracking_raw <- current_tracking_df_anim_raw %>% filter(gameId == animate_gameId, playId == animate_playId) %>% collect()
if (nrow(play_tracking_raw) == 0) { stop(paste("No tracking data for selected play")) }
rm(current_tracking_df_anim_raw); gc()
# *** CORRECTED JOIN LOGIC HERE ***
play_tracking_for_anim <- play_tracking_raw %>%
rename(tracking_displayName = displayName) %>%
left_join(
players_df %>% select(nflId, official_displayName = displayName, official_position = position),
by = "nflId"
) %>%
mutate(
displayName = ifelse(!is.na(official_displayName), official_displayName, tracking_displayName),
position = official_position
# jerseyNumber from play_tracking_raw is automatically kept
) %>%
select(-any_of(c("official_displayName", "official_position", "tracking_displayName")))
play_info_for_anim <- temp_play_info_for_anim
game_info_for_anim <- games_df %>% filter(gameId == animate_gameId) %>% slice(1)
# --- Step B: Prepare Data for Proximity Line and Text ---
cat("Preparing per-frame proximity data for animation...\n")
cb_trajectory <- play_tracking_for_anim %>% filter(nflId == ramsey_nflId) %>% select(frameId, time, x_cb = x, y_cb = y)
matched_wr_trajectory <- play_tracking_for_anim %>% filter(nflId == gabe_davis_nflId) %>% select(frameId, time, x_wr = x, y_wr = y)
proximity_data_for_anim <- cb_trajectory %>%
inner_join(matched_wr_trajectory, by = c("frameId", "time")) %>%
mutate(
distance = sqrt((x_cb - x_wr)^2 + (y_cb - y_wr)^2),
text_x = (x_cb + x_wr) / 2,
text_y = (y_cb + y_wr) / 2 + 3.0
)
if(nrow(proximity_data_for_anim) == 0) {
warning("Could not create proximity data. Proximity line/text will be missing.")
# Create empty tibble to prevent errors in geoms
proximity_data_for_anim <- tibble(frameId=integer(), time=Sys.time()[-1], x_cb=numeric(), y_cb=numeric(), x_wr=numeric(), y_wr=numeric(), distance=numeric(), text_x=numeric(), text_y=numeric())
}
# --- Step C: Determine Animation Window ---
snap_frame <- play_tracking_for_anim %>% filter(event == 'ball_snap') %>% pull(frameId) %>% first()
play_end_event_frame <- play_tracking_for_anim %>%
filter(event %in% c('tackle', 'out_of_bounds', 'touchdown', 'pass_outcome_caught', 'pass_outcome_incomplete', 'pass_outcome_interception', 'fumble', 'qb_sack', 'pass_reception')) %>%
pull(frameId) %>% last()
start_anim_frame <- if(!is.na(snap_frame)) snap_frame - (n_frames_per_second * 0.5) else min(play_tracking_for_anim$frameId, na.rm=TRUE)
start_anim_frame <- max(1, start_anim_frame)
end_anim_frame_calc <- if(!is.na(play_end_event_frame)) play_end_event_frame + (n_frames_per_second * 1) else if (!is.na(snap_frame)) snap_frame + (animation_seconds_after_snap * n_frames_per_second) else max(play_tracking_for_anim$frameId, na.rm=TRUE)
end_anim_frame <- min(end_anim_frame_calc, max(play_tracking_for_anim$frameId, na.rm = TRUE))
play_tracking_subset_anim <- play_tracking_for_anim %>% filter(frameId >= start_anim_frame & frameId <= end_anim_frame)
proximity_data_subset_anim <- proximity_data_for_anim %>% filter(frameId >= start_anim_frame & frameId <= end_anim_frame)
if(nrow(play_tracking_subset_anim) == 0) stop("No tracking data in animation window.")
# --- Step D: Setup Plotting Elements ---
home_team_anim <- game_info_for_anim$homeTeamAbbr
visitor_team_anim <- game_info_for_anim$visitorTeamAbbr
off_team_anim <- play_info_for_anim$possessionTeam
play_tracking_subset_anim <- play_tracking_subset_anim %>%
mutate(team_primary_color=sapply(club,function(c)get_team_colors(c)[1]),team_secondary_color=sapply(club,function(c)get_team_colors(c)[2]),is_ball=ifelse(is.na(nflId),TRUE,FALSE),player_label=if_else(!is.na(jerseyNumber),as.character(jerseyNumber),""))
los_anim <- play_info_for_anim$absoluteYardlineNumber
play_dir_anim <- play_tracking_subset_anim$playDirection[1]; if(is.na(play_dir_anim)){play_dir_anim<-play_info_for_anim$playDirection[1]};if(is.na(play_dir_anim)){play_dir_anim<-"right"}
if(use_dynamic_los_to_endzone_zoom){if(play_dir_anim=="left"){xd<-c(0,los_anim+10)}else{xd<-c(los_anim-10,120)};xd[1]<-max(0,xd[1]);xd[2]<-min(120,xd[2]);yd<-c(0,160/3);vspan<-xd[2]-xd[1];if(vspan<=0){vspan=120;xd=c(0,120);warning("Visible span was <=0, defaulting.")};cu<-coord_fixed(r=(160/3)/vspan,xl=xd,yl=yd,ex=F)}else{vspan<-120;xd<-c(0,120);yd<-c(0,160/3);cu<-coord_fixed(r=(160/3)/120,xl=c(0,120),yl=c(0,160/3),ex=F)}
xlim_dynamic <- xd; ylim_dynamic <- yd
# --- Step E: Create Animation ---
player_marker_s <- 12; jersey_text_s <- 4; ball_marker_s <- 6
cat("Creating ggplot object for animation...\n")
p_anim_obj <- plot_field_basic() +
geom_segment(aes(x=los_anim,xend=los_anim,y=0,yend=160/3),color="yellow",linewidth=0.7,linetype="dashed",alpha=0.7) +
geom_point(data=filter(play_tracking_subset_anim, !is_ball),aes(x=x,y=y,fill=team_primary_color,color=team_secondary_color,group=nflId, size = I(ifelse(nflId %in% c(ramsey_nflId, gabe_davis_nflId), player_marker_s * 1.15, player_marker_s))),shape=21,stroke=1) +
geom_text(data=filter(play_tracking_subset_anim,!is_ball&player_label!=""),aes(x=x,y=y,label=player_label,group=nflId, alpha = I(ifelse(nflId %in% c(ramsey_nflId, gabe_davis_nflId), 1, 0.8))),color=ifelse(filter(play_tracking_subset_anim,!is_ball&player_label!="")$club%in%c("LA","BUF"),"white","black"),size=jersey_text_s,fontface="bold")+
geom_point(data=filter(play_tracking_subset_anim,is_ball),aes(x=x,y=y),fill=get_team_colors("football")[1],color=get_team_colors("football")[2],shape=21,size=ball_marker_s)+
scale_fill_identity()+scale_color_identity()+scale_size_identity()+scale_alpha_identity()+cu+
labs(title=paste(ramsey_name,"(LA) vs.",gabe_davis_name,"(BUF) | Cov:",play_info_for_anim$pff_passCoverage),subtitle=paste(str_trunc(play_info_for_anim$playDescription,50),"\nFrame Time: {format(frame_time,'.1f')}s"),caption="Data: NFL BDB")+
theme(plot.background=element_rect(fill="grey10",color="grey10"),panel.background=element_rect(fill="grey10"),text=element_text(color="white"),plot.title=element_text(hjust=0.5,size=11,face="bold"),plot.subtitle=element_text(hjust=0.5,size=8,lineheight=1.0),plot.caption=element_text(size=7,hjust=1),plot.margin=margin(2,2,2,2,"pt"))+
transition_reveal(time)+ease_aes('linear')+shadow_wake(wake_length=0.05,alpha=0.2)
if(nrow(proximity_data_subset_anim) > 0) {
p_anim_obj <- p_anim_obj +
geom_segment(data=proximity_data_subset_anim,aes(x=x_cb,y=y_cb,xend=x_wr,yend=y_wr, group=frameId),color="orange",linewidth=1.2,alpha=0.9)+
geom_label(data=proximity_data_subset_anim,aes(x=text_x,y=text_y,label=paste0(round(distance,1),"yd"), group=frameId),color="black",fill=alpha("white",0.7),size=3.5,label.padding=unit(0.1,"lines"))
}
# --- Step F: Render & Save ---
cat("Rendering animation...\n")
time_span_of_subset <- if (nrow(play_tracking_subset_anim) > 1 && n_distinct(play_tracking_subset_anim$time) > 1) {as.numeric(diff(range(play_tracking_subset_anim$time)), units = "secs")} else { (n_distinct(play_tracking_subset_anim$frameId)) / n_frames_per_second }
if(time_span_of_subset <= 0 && nrow(play_tracking_subset_anim) > 0) { time_span_of_subset <- (n_distinct(play_tracking_subset_anim$frameId)) / n_frames_per_second }
if(time_span_of_subset <= 0) { time_span_of_subset <- 3 }
final_nframes<-max(20, ceiling(time_span_of_subset * n_frames_per_second))
target_w_px<-1800; asp_ratio_HW<-(ylim_dynamic[2]-ylim_dynamic[1])/(xlim_dynamic[2]-xlim_dynamic[1]); if(is.infinite(asp_ratio_HW)||asp_ratio_HW==0||is.na(asp_ratio_HW)){default_asp_HW<-if(use_dynamic_los_to_endzone_zoom&&exists("visible_span_yards_anim")&&visible_span_yards_anim > 0)(160/3)/visible_span_yards_anim else (160/3)/120;asp_ratio_HW<-default_asp_HW;warning("Panel aspect ratio issue.")};target_h_px<-round(target_w_px*asp_ratio_HW);target_h_px<-max(400,min(target_h_px,round(target_w_px*1.5)))
res_value <- 100
anim<-animate(p_anim_obj,nframes=final_nframes,fps=n_frames_per_second,width=target_w_px,height=target_h_px,renderer=gifski_renderer(loop=T),end_pause=n_frames_per_second*2,res=res_value,dev="ragg_png")
anim_save(output_gif_filename,animation=anim)
cat("Animation saved as",output_gif_filename,"\n--- Animation Complete ---\n")
source("C:/Users/erics/Downloads/OASIS_ShinyApp/oasisapp.R", echo = TRUE)
library(shiny); runApp('C:/Users/erics/Downloads/OASIS_ShinyApp/oasisapp.R')
runApp('C:/Users/erics/Downloads/OASIS_ShinyApp/oasisapp.R')
shinylive::export(".", ".")
setwd("C:/Users/erics/Downloads/github/OASISApp")
shinylive::export(".", ".")
